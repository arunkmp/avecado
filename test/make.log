/usr/bin/protoc -Imapnik-vector-tile/proto --cpp_out=src mapnik-vector-tile/proto/vector_tile.proto && mv src/vector_tile.pb.h include/
make  all-am
make[1]: Entering directory `/home/test/avecado/backup1/avecado'
  CXX    src/avecado.lo
  CXX    src/backend.lo
  CXX    src/tile.lo
  CXX    src/post_processor.lo
  CXX    src/post_process/adminizer.lo
In file included from /usr/local/boost-1.56/include/boost/geometry/algorithms/detail/relate/relate.hpp:53:0,
                 from /usr/local/boost-1.56/include/boost/geometry/strategies/agnostic/relate.hpp:14,
                 from /usr/local/boost-1.56/include/boost/geometry/strategies/strategies.hpp:74,
                 from /usr/local/boost-1.56/include/boost/geometry/geometry.hpp:43,
                 from /usr/local/boost-1.56/include/boost/geometry.hpp:17,
                 from src/post_process/adminizer.cpp:8:
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/relate/linear_areal.hpp: In instantiation of 'static bool boost::geometry::detail::relate::linear_areal<Geometry1, Geometry2, TransposeResult>::turns_analyser<TurnInfo>::calculate_from_inside(const Geometry1&, const Geometry2&, const Turn&) [with Turn = boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >; TurnInfo = boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >; Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; bool TransposeResult = false]':
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/relate/linear_areal.hpp:623:75:   required from 'void boost::geometry::detail::relate::linear_areal<Geometry1, Geometry2, TransposeResult>::turns_analyser<TurnInfo>::apply(Result&, TurnIt, const Geometry&, const OtherGeometry&, const BoundaryChecker&) [with Result = boost::geometry::detail::relate::static_mask_handler<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'>, true>; TurnIt = __gnu_cxx::__normal_iterator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >*, std::vector<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >, std::allocator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> > > > >; Geometry = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; OtherGeometry = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; BoundaryChecker = boost::geometry::detail::relate::boundary_checker<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::linestring_tag>; TurnInfo = boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >; Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; bool TransposeResult = false]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/relate/linear_areal.hpp:966:13:   required from 'static void boost::geometry::detail::relate::linear_areal<Geometry1, Geometry2, TransposeResult>::analyse_each_turn(Result&, Analyser&, TurnIt, TurnIt, const Geometry&, const OtherGeometry&, const BoundaryChecker&) [with Result = boost::geometry::detail::relate::static_mask_handler<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'>, true>; TurnIt = __gnu_cxx::__normal_iterator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >*, std::vector<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >, std::allocator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> > > > >; Analyser = boost::geometry::detail::relate::linear_areal<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, false>::turns_analyser<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> > >; Geometry = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; OtherGeometry = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; BoundaryChecker = boost::geometry::detail::relate::boundary_checker<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::linestring_tag>; Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; bool TransposeResult = false]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/relate/linear_areal.hpp:252:48:   required from 'static void boost::geometry::detail::relate::linear_areal<Geometry1, Geometry2, TransposeResult>::apply(const Geometry1&, const Geometry2&, Result&) [with Result = boost::geometry::detail::relate::static_mask_handler<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'>, true>; Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; bool TransposeResult = false]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/relate/relate.hpp:294:95:   required from 'typename boost::geometry::detail::relate::result_handler_type<Geometry1, Geometry2, MatrixOrMask>::type::result_type boost::geometry::detail::relate::relate(const Geometry1&, const Geometry2&, const MatrixOrMask&) [with MatrixOrMask = boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'>; Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; typename boost::geometry::detail::relate::result_handler_type<Geometry1, Geometry2, MatrixOrMask>::type::result_type = bool]'
/usr/local/boost-1.56/include/boost/geometry/strategies/agnostic/relate.hpp:29:71:   required from 'static bool boost::geometry::strategy::relate::relate<StaticMask>::apply(const Geometry1&, const Geometry2&) [with Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; StaticMask = boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'>]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:79:52:   required from 'static bool boost::geometry::detail::within::use_relate::apply(const Geometry1&, const Geometry2&, const Strategy&) [with Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; Strategy = boost::geometry::strategy::relate::relate<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'> >]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:294:92:   required from 'static bool boost::geometry::resolve_strategy::within::apply(const Geometry1&, const Geometry2&, const Strategy&) [with Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; Strategy = boost::geometry::strategy::relate::relate<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'> >]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:323:59:   required from 'static bool boost::geometry::resolve_strategy::within::apply(const Geometry1&, const Geometry2&, boost::geometry::default_strategy) [with Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:347:56:   required from 'static bool boost::geometry::resolve_variant::within<Geometry1, Geometry2>::apply(const Geometry1&, const Geometry2&, const Strategy&) [with Strategy = boost::geometry::default_strategy; Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:493:58:   required from 'bool boost::geometry::within(const Geometry1&, const Geometry2&) [with Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>]'
src/post_process/adminizer.cpp:349:31:   required from here
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/relate/linear_areal.hpp:847:31: warning: unused variable 's1' [-Wunused-variable]
             std::size_t const s1 = boost::size(range1);
                               ^
In file included from /usr/local/boost-1.56/include/boost/geometry/algorithms/detail/overlay/get_turns.hpp:60:0,
                 from /usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:55,
                 from /usr/local/boost-1.56/include/boost/geometry/algorithms/detail/disjoint/areal_areal.hpp:26,
                 from /usr/local/boost-1.56/include/boost/geometry/algorithms/detail/disjoint/implementation.hpp:25,
                 from /usr/local/boost-1.56/include/boost/geometry/algorithms/disjoint.hpp:25,
                 from /usr/local/boost-1.56/include/boost/geometry/io/wkt/write.hpp:30,
                 from /usr/local/boost-1.56/include/boost/geometry/io/wkt/wkt.hpp:18,
                 from /usr/local/boost-1.56/include/boost/geometry/strategies/cartesian/buffer_end_round.hpp:20,
                 from /usr/local/boost-1.56/include/boost/geometry/strategies/strategies.hpp:39,
                 from /usr/local/boost-1.56/include/boost/geometry/geometry.hpp:43,
                 from /usr/local/boost-1.56/include/boost/geometry.hpp:17,
                 from src/post_process/adminizer.cpp:8:
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/overlay/get_turn_info_la.hpp: In instantiation of 'static bool boost::geometry::detail::overlay::get_turn_info_linear_areal<AssignPolicy>::get_turn_info_for_endpoint(const Point1&, const Point1&, const Point1&, const Point2&, const Point2&, const Point2&, bool, bool, bool, bool, const TurnInfo&, const IntersectionInfo&, boost::geometry::detail::overlay::method_type, OutputIterator) [with bool EnableFirst = true; bool EnableLast = true; Point1 = boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>; Point2 = boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>; TurnInfo = boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >; IntersectionInfo = boost::geometry::detail::overlay::intersection_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::detail::no_rescale_policy>; OutputIterator = std::back_insert_iterator<std::vector<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >, std::allocator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> > > > >; AssignPolicy = boost::geometry::detail::relate::turns::assign_policy<>]':
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/overlay/get_turn_info_la.hpp:66:43:   required from 'static OutputIterator boost::geometry::detail::overlay::get_turn_info_linear_areal<AssignPolicy>::apply(const Point1&, const Point1&, const Point1&, const Point2&, const Point2&, const Point2&, bool, bool, bool, bool, const TurnInfo&, const RobustPolicy&, OutputIterator) [with Point1 = boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>; Point2 = boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>; TurnInfo = boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >; RobustPolicy = boost::geometry::detail::no_rescale_policy; OutputIterator = std::back_insert_iterator<std::vector<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >, std::allocator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> > > > >; AssignPolicy = boost::geometry::detail::relate::turns::assign_policy<>]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/overlay/get_turns.hpp:298:83:   required from 'static bool boost::geometry::detail::get_turns::get_turns_in_sections<Geometry1, Geometry2, Reverse1, Reverse2, Section1, Section2, TurnPolicy>::apply(int, const Geometry1&, const Section1&, int, const Geometry2&, const Section2&, bool, const RobustPolicy&, Turns&, InterruptPolicy&) [with Turns = std::vector<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >, std::allocator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> > > >; RobustPolicy = boost::geometry::detail::no_rescale_policy; InterruptPolicy = boost::geometry::detail::relate::linear_areal<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, false>::interrupt_policy_linear_areal<boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::static_mask_handler<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'>, true> >; Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; bool Reverse1 = false; bool Reverse2 = true; Section1 = boost::geometry::section<boost::geometry::model::box<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, 2ul>; Section2 = boost::geometry::section<boost::geometry::model::box<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, 2ul>; TurnPolicy = boost::geometry::detail::get_turns::get_turn_info_type<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::turns::assign_policy<>, boost::geometry::linestring_tag, boost::geometry::polygon_tag, boost::geometry::linear_tag, boost::geometry::areal_tag>]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/overlay/get_turns.hpp:464:56:   required from 'bool boost::geometry::detail::get_turns::section_visitor<Geometry1, Geometry2, Reverse1, Reverse2, Turns, TurnPolicy, RobustPolicy, InterruptPolicy>::apply(const Section&, const Section&) [with Section = boost::geometry::section<boost::geometry::model::box<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, 2ul>; Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; bool Reverse1 = false; bool Reverse2 = true; Turns = std::vector<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >, std::allocator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> > > >; TurnPolicy = boost::geometry::detail::get_turns::get_turn_info_type<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::turns::assign_policy<>, boost::geometry::linestring_tag, boost::geometry::polygon_tag, boost::geometry::linear_tag, boost::geometry::areal_tag>; RobustPolicy = boost::geometry::detail::no_rescale_policy; InterruptPolicy = boost::geometry::detail::relate::linear_areal<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, false>::interrupt_policy_linear_areal<boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::static_mask_handler<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'>, true> >]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/partition.hpp:443:21:   required from 'static void boost::geometry::partition<Box, ExpandPolicy1, OverlapsPolicy1, ExpandPolicy2, OverlapsPolicy2, VisitBoxPolicy>::apply(const InputCollection1&, const InputCollection2&, VisitPolicy&, std::size_t, VisitBoxPolicy) [with InputCollection1 = boost::geometry::sections<boost::geometry::model::box<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, 2ul>; InputCollection2 = boost::geometry::sections<boost::geometry::model::box<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, 2ul>; VisitPolicy = boost::geometry::detail::get_turns::section_visitor<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, false, true, std::vector<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >, std::allocator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> > > >, boost::geometry::detail::get_turns::get_turn_info_type<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::turns::assign_policy<>, boost::geometry::linestring_tag, boost::geometry::polygon_tag, boost::geometry::linear_tag, boost::geometry::areal_tag>, boost::geometry::detail::no_rescale_policy, boost::geometry::detail::relate::linear_areal<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, false>::interrupt_policy_linear_areal<boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::static_mask_handler<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'>, true> > >; Box = boost::geometry::model::box<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; ExpandPolicy1 = boost::geometry::detail::get_turns::get_section_box; OverlapsPolicy1 = boost::geometry::detail::get_turns::ovelaps_section_box; ExpandPolicy2 = boost::geometry::detail::get_turns::get_section_box; OverlapsPolicy2 = boost::geometry::detail::get_turns::ovelaps_section_box; VisitBoxPolicy = boost::geometry::visit_no_policy; std::size_t = long unsigned int]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/overlay/get_turns.hpp:518:41:   required from 'static void boost::geometry::detail::get_turns::get_turns_generic<Geometry1, Geometry2, Reverse1, Reverse2, TurnPolicy>::apply(int, const Geometry1&, int, const Geometry2&, const RobustPolicy&, Turns&, InterruptPolicy&) [with RobustPolicy = boost::geometry::detail::no_rescale_policy; Turns = std::vector<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >, std::allocator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> > > >; InterruptPolicy = boost::geometry::detail::relate::linear_areal<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, false>::interrupt_policy_linear_areal<boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::static_mask_handler<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'>, true> >; Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; bool Reverse1 = false; bool Reverse2 = true; TurnPolicy = boost::geometry::detail::get_turns::get_turn_info_type<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::turns::assign_policy<>, boost::geometry::linestring_tag, boost::geometry::polygon_tag, boost::geometry::linear_tag, boost::geometry::areal_tag>]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/relate/turns.hpp:86:74:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:79:52:   required from 'static bool boost::geometry::detail::within::use_relate::apply(const Geometry1&, const Geometry2&, const Strategy&) [with Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; Strategy = boost::geometry::strategy::relate::relate<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'> >]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:294:92:   required from 'static bool boost::geometry::resolve_strategy::within::apply(const Geometry1&, const Geometry2&, const Strategy&) [with Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; Strategy = boost::geometry::strategy::relate::relate<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'> >]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:323:59:   required from 'static bool boost::geometry::resolve_strategy::within::apply(const Geometry1&, const Geometry2&, boost::geometry::default_strategy) [with Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:347:56:   required from 'static bool boost::geometry::resolve_variant::within<Geometry1, Geometry2>::apply(const Geometry1&, const Geometry2&, const Strategy&) [with Strategy = boost::geometry::default_strategy; Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:493:58:   required from 'bool boost::geometry::within(const Geometry1&, const Geometry2&) [with Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>]'
src/post_process/adminizer.cpp:349:31:   required from here
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/overlay/get_turn_info_la.hpp:655:19: warning: unused variable 'segment_index0' [-Wunused-variable]
         const int segment_index0 = tp_model.operations[0].seg_id.segment_index;
                   ^
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/overlay/get_turn_info_la.hpp:656:19: warning: unused variable 'segment_index1' [-Wunused-variable]
         const int segment_index1 = tp_model.operations[1].seg_id.segment_index;
                   ^
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/overlay/get_turn_info_la.hpp: In instantiation of 'static bool boost::geometry::detail::overlay::get_turn_info_linear_areal<AssignPolicy>::get_turn_info_for_endpoint(const Point1&, const Point1&, const Point1&, const Point2&, const Point2&, const Point2&, bool, bool, bool, bool, const TurnInfo&, const IntersectionInfo&, boost::geometry::detail::overlay::method_type, OutputIterator) [with bool EnableFirst = false; bool EnableLast = true; Point1 = boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>; Point2 = boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>; TurnInfo = boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >; IntersectionInfo = boost::geometry::detail::overlay::intersection_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::detail::no_rescale_policy>; OutputIterator = std::back_insert_iterator<std::vector<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >, std::allocator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> > > > >; AssignPolicy = boost::geometry::detail::relate::turns::assign_policy<>]':
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/overlay/get_turn_info_la.hpp:77:48:   required from 'static OutputIterator boost::geometry::detail::overlay::get_turn_info_linear_areal<AssignPolicy>::apply(const Point1&, const Point1&, const Point1&, const Point2&, const Point2&, const Point2&, bool, bool, bool, bool, const TurnInfo&, const RobustPolicy&, OutputIterator) [with Point1 = boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>; Point2 = boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>; TurnInfo = boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >; RobustPolicy = boost::geometry::detail::no_rescale_policy; OutputIterator = std::back_insert_iterator<std::vector<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >, std::allocator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> > > > >; AssignPolicy = boost::geometry::detail::relate::turns::assign_policy<>]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/overlay/get_turns.hpp:298:83:   required from 'static bool boost::geometry::detail::get_turns::get_turns_in_sections<Geometry1, Geometry2, Reverse1, Reverse2, Section1, Section2, TurnPolicy>::apply(int, const Geometry1&, const Section1&, int, const Geometry2&, const Section2&, bool, const RobustPolicy&, Turns&, InterruptPolicy&) [with Turns = std::vector<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >, std::allocator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> > > >; RobustPolicy = boost::geometry::detail::no_rescale_policy; InterruptPolicy = boost::geometry::detail::relate::linear_areal<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, false>::interrupt_policy_linear_areal<boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::static_mask_handler<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'>, true> >; Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; bool Reverse1 = false; bool Reverse2 = true; Section1 = boost::geometry::section<boost::geometry::model::box<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, 2ul>; Section2 = boost::geometry::section<boost::geometry::model::box<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, 2ul>; TurnPolicy = boost::geometry::detail::get_turns::get_turn_info_type<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::turns::assign_policy<>, boost::geometry::linestring_tag, boost::geometry::polygon_tag, boost::geometry::linear_tag, boost::geometry::areal_tag>]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/overlay/get_turns.hpp:464:56:   required from 'bool boost::geometry::detail::get_turns::section_visitor<Geometry1, Geometry2, Reverse1, Reverse2, Turns, TurnPolicy, RobustPolicy, InterruptPolicy>::apply(const Section&, const Section&) [with Section = boost::geometry::section<boost::geometry::model::box<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, 2ul>; Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; bool Reverse1 = false; bool Reverse2 = true; Turns = std::vector<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >, std::allocator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> > > >; TurnPolicy = boost::geometry::detail::get_turns::get_turn_info_type<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::turns::assign_policy<>, boost::geometry::linestring_tag, boost::geometry::polygon_tag, boost::geometry::linear_tag, boost::geometry::areal_tag>; RobustPolicy = boost::geometry::detail::no_rescale_policy; InterruptPolicy = boost::geometry::detail::relate::linear_areal<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, false>::interrupt_policy_linear_areal<boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::static_mask_handler<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'>, true> >]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/partition.hpp:443:21:   required from 'static void boost::geometry::partition<Box, ExpandPolicy1, OverlapsPolicy1, ExpandPolicy2, OverlapsPolicy2, VisitBoxPolicy>::apply(const InputCollection1&, const InputCollection2&, VisitPolicy&, std::size_t, VisitBoxPolicy) [with InputCollection1 = boost::geometry::sections<boost::geometry::model::box<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, 2ul>; InputCollection2 = boost::geometry::sections<boost::geometry::model::box<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, 2ul>; VisitPolicy = boost::geometry::detail::get_turns::section_visitor<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, false, true, std::vector<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >, std::allocator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> > > >, boost::geometry::detail::get_turns::get_turn_info_type<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::turns::assign_policy<>, boost::geometry::linestring_tag, boost::geometry::polygon_tag, boost::geometry::linear_tag, boost::geometry::areal_tag>, boost::geometry::detail::no_rescale_policy, boost::geometry::detail::relate::linear_areal<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, false>::interrupt_policy_linear_areal<boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::static_mask_handler<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'>, true> > >; Box = boost::geometry::model::box<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; ExpandPolicy1 = boost::geometry::detail::get_turns::get_section_box; OverlapsPolicy1 = boost::geometry::detail::get_turns::ovelaps_section_box; ExpandPolicy2 = boost::geometry::detail::get_turns::get_section_box; OverlapsPolicy2 = boost::geometry::detail::get_turns::ovelaps_section_box; VisitBoxPolicy = boost::geometry::visit_no_policy; std::size_t = long unsigned int]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/overlay/get_turns.hpp:518:41:   required from 'static void boost::geometry::detail::get_turns::get_turns_generic<Geometry1, Geometry2, Reverse1, Reverse2, TurnPolicy>::apply(int, const Geometry1&, int, const Geometry2&, const RobustPolicy&, Turns&, InterruptPolicy&) [with RobustPolicy = boost::geometry::detail::no_rescale_policy; Turns = std::vector<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> >, std::allocator<boost::geometry::detail::overlay::turn_info<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, boost::geometry::segment_ratio<double>, boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, boost::array<boost::geometry::detail::overlay::turn_operation_linear<boost::geometry::segment_ratio<double> >, 2ul> > > >; InterruptPolicy = boost::geometry::detail::relate::linear_areal<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, false>::interrupt_policy_linear_areal<boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::static_mask_handler<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'>, true> >; Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; bool Reverse1 = false; bool Reverse2 = true; TurnPolicy = boost::geometry::detail::get_turns::get_turn_info_type<boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >, boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>, boost::geometry::detail::relate::turns::assign_policy<>, boost::geometry::linestring_tag, boost::geometry::polygon_tag, boost::geometry::linear_tag, boost::geometry::areal_tag>]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/relate/turns.hpp:86:74:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:79:52:   required from 'static bool boost::geometry::detail::within::use_relate::apply(const Geometry1&, const Geometry2&, const Strategy&) [with Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; Strategy = boost::geometry::strategy::relate::relate<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'> >]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:294:92:   required from 'static bool boost::geometry::resolve_strategy::within::apply(const Geometry1&, const Geometry2&, const Strategy&) [with Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>; Strategy = boost::geometry::strategy::relate::relate<boost::geometry::detail::relate::static_mask<'T', '*', 'F', '*', '*', 'F', '*', '*', '*'> >]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:323:59:   required from 'static bool boost::geometry::resolve_strategy::within::apply(const Geometry1&, const Geometry2&, boost::geometry::default_strategy) [with Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:347:56:   required from 'static bool boost::geometry::resolve_variant::within<Geometry1, Geometry2>::apply(const Geometry1&, const Geometry2&, const Strategy&) [with Strategy = boost::geometry::default_strategy; Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>]'
/usr/local/boost-1.56/include/boost/geometry/algorithms/within.hpp:493:58:   required from 'bool boost::geometry::within(const Geometry1&, const Geometry2&) [with Geometry1 = boost::geometry::model::linestring<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian> >; Geometry2 = boost::geometry::model::polygon<boost::geometry::model::point<double, 2ul, boost::geometry::cs::cartesian>, false, true>]'
src/post_process/adminizer.cpp:349:31:   required from here
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/overlay/get_turn_info_la.hpp:655:19: warning: unused variable 'segment_index0' [-Wunused-variable]
         const int segment_index0 = tp_model.operations[0].seg_id.segment_index;
                   ^
/usr/local/boost-1.56/include/boost/geometry/algorithms/detail/overlay/get_turn_info_la.hpp:656:19: warning: unused variable 'segment_index1' [-Wunused-variable]
         const int segment_index1 = tp_model.operations[1].seg_id.segment_index;
                   ^
  CXX    src/post_process/generalizer.lo
  CXX    src/post_process/labelizer.lo
  CXX    src/post_process/unionizer.lo
  CXX    src/vector_tile.pb.lo
  CXXLD  libavecado.la
  CXX    logging/logger.lo
  CXX    logging/stdout_logger.lo
  CXX    logging/file_logger.lo
  CXX    logging/null_logger.lo
  CXXLD  liblogging.la
  CXX    src/avecado_la-python_module.lo
  CXXLD  avecado.la
libtool: link: warning: `/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcairo.la' seems to be moved
libtool: link: warning: `/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../lib/libproj.la' seems to be moved
libtool: link: warning: `/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libtiff.la' seems to be moved
libtool: link: warning: `/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libxml2.la' seems to be moved
libtool: link: warning: `/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libfreetype.la' seems to be moved
  CXX    src/avecado_exporter.o
  CXXLD  avecado
  CXX    src/avecado_server-avecado_server.o
  CXX    src/http_server/avecado_server-connection.o
  CXX    src/http_server/avecado_server-mime_types.o
  CXX    src/http_server/avecado_server-parse_path.o
  CXX    src/http_server/avecado_server-reply.o
  CXX    src/http_server/avecado_server-request_handler.o
  CXX    src/http_server/avecado_server-request_parser.o
  CXX    src/http_server/avecado_server-server.o
In file included from src/http_server/server.cpp:11:0:
./include/http_server/server.hpp: In constructor ‘http::server3::server::server(const string&, const server_options&)’:
./include/http_server/server.hpp:80:15: warning: ‘http::server3::server::map_xml_’ will be initialized after [-Wreorder]
   std::string map_xml_;
               ^
./include/http_server/server.hpp:65:15: warning:   ‘std::string http::server3::server::port_’ [-Wreorder]
   std::string port_;
               ^
src/http_server/server.cpp:43:1: warning:   when initialized here [-Wreorder]
 server::server(const std::string& address, const server_options &options)
 ^
  CXXLD  avecado_server
/usr/bin/ld: warning: libboost_system.so.1.49.0, needed by /usr/local/lib/libmapnik.so, may conflict with libboost_system.so.1.56.0
make[1]: Leaving directory `/home/test/avecado/backup1/avecado'
